name: Test with Mock Database

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main"]
  pull_request:
    branches: [ "main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4.7.0
      with:
        # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
        python-version: 3.10
        # File containing the Python version to use. Example: .python-version
        python-version-file: # optional
        # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
        cache: # optional
        # The target architecture (x86, x64) of the Python or PyPy interpreter.
        architecture: # optional
        # Set this option if you want the action to check for the latest available version that satisfies the version spec.
        check-latest: # optional
        # The token used to authenticate when fetching Python distributions from https://github.com/actions/python-versions. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
        token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
        # Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies.
        cache-dependency-path: # optional
        # Set this option if you want the action to update environment variables.
        update-environment: # optional, default is true
        # When 'true', a version range passed to 'python-version' input will match prerelease versions if no GA versions are found. Only 'x.y' version range is supported for CPython.
        allow-prereleases: # optional

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Set up PostgreSQL
      run: |
        # Install PostgreSQL
        sudo apt-get update
        sudo apt-get install postgresql postgresql-client
    
        # Start PostgreSQL service
        sudo service postgresql start
    
        # Create database and user (replace with your credentials)
        sudo -u postgres psql -c "CREATE DATABASE mytestdb;"
        sudo -u postgres psql -c "CREATE USER myuser WITH PASSWORD 'mypassword';"
        sudo -u postgres psql -c "ALTER ROLE myuser SET client_encoding TO 'utf8';"
        sudo -u postgres psql -c "ALTER ROLE myuser SET default_transaction_isolation TO 'read committed';"
        sudo -u postgres psql -c "ALTER ROLE myuser SET timezone TO 'UTC';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE mytestdb TO myuser;"

    - name: Run tests
      run: pytest  # Replace with your testing command.
